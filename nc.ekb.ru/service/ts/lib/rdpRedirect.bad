#!/usr/bin/perl

use strict;

use DBI;
use File::Basename;
use IO::Socket;
use IO::Select;
#use POSIX 'setsid';

if(not -t STDOUT)
{
 open STDOUT, '>', '/dev/null';
 open STDERR, '>', '/dev/null';
}

die "Invalid parameter(s)!\n"	unless 1==scalar @ARGV;

my $h=DBI->connect('dbi:SQLite:'.dirname($0).'/../data/data.db')	or die "Cannot connect to DB!\n";
$h->{RaiseError}=1;
my $stmt=$h->prepare("Select L.No, L.s, Z.tAccpt, Z.tData From Log As L, Z Where L.No=? And Z.No=L.No");
$stmt->execute($ARGV[0]);
my $Srv=$stmt->fetchrow_hashref	or	die "Record not found!\n";
$stmt->finish;

my $Acc=IO::Socket::INET->new(Listen=>1, Timeout=>$Srv->{tAccpt});
#print "Listening on port ", $Acc->sockport, "\n";
$h->do("Update Log Set Port=? Where No=?", undef, $Acc->sockport, $Srv->{No});

fork	and exit;
#setsid;

my $s=IO::Select->new();
my $s2=IO::Select->new();

my %Conn;
sub storeConn
{
 my $Force=shift;
 return	unless $Force or $Conn{Last}!=time;
 $h->do("Update Data Set Time=?, iBytes=?, oBytes=? Where No=?", undef, ($Conn{Last}=time)-$Conn{Start}, @{$Conn{Bytes}}, $Conn{No});
}

while(my $IN=$Acc->accept())
{
# $h->do('Insert Into Data(logNo, IP) Values(?, ?)', undef, $Srv->{No}, $IN->peerhost());
 %Conn=(Start=>time, Bytes=>[], No=>$h->func('last_insert_rowid'), Last=>time,);

 my $OUT=IO::Socket::INET->new(PeerAddr=>$Srv->{s}, PeerPort=>3389)	or next;

 $IN->autoflush(0); 
 $OUT->autoflush(0);

 $IN->blocking(0);
 $OUT->blocking(0);

 $s->add($IN, $OUT);

 for(my $EOF; !$EOF;)
 {
  my @R=$s->can_read($Srv->{tData});
  last	unless scalar @R;
 
  foreach my $r(@R)
  {
   $EOF=1, next	if $r->eof;
   my $w=($r==$IN)? $OUT : $IN;
   my $chunk;
   while(my $len=$r->read($chunk, 10240))
   {
    $s2->add($w);
    $s2->can_write(0.001);
    $s2->remove($w);
    $w->syswrite($chunk);
    $Conn{Bytes}[$r==$IN]+=$len;
#    storeConn();
   }
  }
 }
 $s->remove($IN, $OUT);
 $IN->close;
 $OUT->close;
# storeConn(1);
}

sub upd

__END__

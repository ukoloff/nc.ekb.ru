DEVELOPER INFO
--------------

phpPgAdmin is Free/Open Source software, so you're invited to contribute to it.
Many great features have been written by other people and you too can help to 
make phpPgAdmin a better tool.

If you're planning to contribute source code, please read the following 
information:
 
The following method is preferred for new developers:
 - fetch the current CVS tree over anonymous CVS:

     cvs -d :pserver:anonymous@phppgadmin.cvs.sourceforge.net:/cvsroot/phppgadmin login
     [Password: ]  simply press the Enter key!

     cvs -z3 -d :pserver:anonymous@phppgadmin.cvs.sourceforge.net:/cvsroot/phppgadmin co -d phpPgAdmin webdb
     [This will create a new sub-directory named phpPgAdmin] 

 - Add your stuff
 - Send us the file(s) you've modified or send us a patch (preferred). To 
   generate a patch, in your 'phpPgAdmin' directory do:

     cvs diff -c > file.txt

   Then, just send us 'file.txt' .

Please note that submitting code is considered a transfer of copyright to the 
phpPgAdmin project.

Write access to the CVS tree is granted only to developers who have already
contributed something useful to phpPgAdmin.  If you're interested in that, 
please contact us.
These project developers can access the CVS tree via SSH:

  export CVS_RSH=ssh
  	
Login once with

  ssh developername@phppgadmin.cvs.sourceforge.net

to create required user directories on the server. Then fetch the current CVS 
tree:
  	
  cvs -z3 -d developername@phppgadmin.cvs.sourceforge.net:/cvsroot/phppgadmin co -d phpPgAdmin webdb

For further information, refer to:

  http://sourceforge.net/projects/phppgadmin

                                 
TIPS FOR DEVELOPERS
-------------------

When you submit code to phpPgAdmin, we do expect it to adhere to the existing
coding standards in the source.  So, instead of using your personal favourite
code layout style, please format it to look like surrounding code.

Test your code properly!  Say you are developing a feature to create domains.
Try naming your domain all of the following:

	* "
	* '
	* \
	* words with spaces
	* <br><br><br>

If you are adding a new class function, be sure to use the "clean",
"fieldClean", "arrayClean" and "fieldArrayClean" functions to properly escape
odd characters in user input.  Examine existing functions that do similar
things to yours to get yours right.

When writing data to the display, you should always urlencode() variables in
HREFs and htmlspecialchars() variables in forms.

When working with CVS, always make sure to do a 'cvs update' both before you 
start; so you have the latest code to work with; and also again before you 
create your patch; to minimize the chance of having conflicts. 

COMMON VARIABLES
----------------

$data - A data connection to the current or default database.
$misc - Contains miscellaneous functions.  eg. printing headers and footers, etc.
$lang - Global array containing translated strings.  The strings in this array have already
        been converted to HTML, so you should not htmlspecialchars() them.
$conf - Global array of configuration options.

WORKING WITH RECORDSETS
-----------------------

phpPgAdmin uses the ADODB database library for all its database access.  We have
also written our own wrapper around the ADODB library to make it more object
oriented (ADODB_base.pclass).

This is the general form for looping over a recordset:

$rs = $class->getResults();
if (is_object($rs) && $rs->recordCount() > 0) {
	while (!$rs->EOF) {
		echo $rs->f['field'];
		$rs->moveNext();
	}
}
else echo "No results.";

